    apt-get update
    apt-get install -y software-properties-common
    apt-add-repository universe
    apt-get update
    apt-get install -y mpich
    apt-get install -y build-essential wget curl pkg-config libtool autoconf openjdk-8-jdk g++ zip zlib1g-dev unzip git
    apt-get install -y python-numpy python-scipy python-dev python-pip python-setuptools
    apt-get install -y python3-numpy python3-scipy python3-dev python3-pip python3-setuptools

    # The CUDA toolkit version 7.5 requires gcc,g++/4.8 so we set them as the defaults
    apt-get install -y gcc-4.8 g++-4.8
	
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 51
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 50
    update-alternatives --auto gcc
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 51
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 50
    update-alternatives --auto g++

    pip install --upgrade pip
    pip3 install --upgrade pip

    # Install CUDA toolkit and driver libraries/binaries

    # Check if we have downloaded a cached copy
    if [ -e cuda_7.5.18_linux.run ]; then
      echo "Using cached CUDA toolkit"
    else
      wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run
    fi

    export PERL5LIB=.
    sh cuda_7.5.18_linux.run --silent --toolkit --override

#    export PERL5LIB=.
#    sh ./cuda_7.5.18_linux.run --extract=`pwd`

    # Manually copy over driver components
#    sh NVIDIA-Linux-x86_64-352.39.run -x
#    cp NVIDIA-Linux-x86_64-352.39/*.h /usr/include

    # Install toolkit components
#    sh cuda-linux64-rel-7.5.18-19867135.run -noprompt

    # Remove cuda bits
    cd $BOOTSTRAP_WORKDIR
    rm -rf CUDA_INSTALL

    # Install cuDNN
    wget http://developer.download.nvidia.com/compute/redist/cudnn/v5.1/cudnn-7.5-linux-x64-v5.1.tgz
    tar xvzf cudnn-7.5-linux-x64-v5.1.tgz 
    cp -P cuda/include/cudnn.h /usr/local/cuda/include
    cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64
    chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

    # We should also add in tensorflow protobuf fix: https://www.tensorflow.org/install/install_linux

    echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list
    curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
    apt-get update -y && apt-get install -y bazel
    apt-get upgrade -y bazel

    # Make sure no leftover tensorflow artifacts from previous builds
    rm -rf /tmp/tensorflow_pkg
    rm -rf /root/.cache

    # Set tensorflow configure options
    export PYTHON_BIN_PATH=`which python`
    export TF_NEED_MKL=0
    export CC_OPT_FLAGS="-march=native"
    export TF_NEED_JEMALLOC=1
    export TF_NEED_GCP=0
    export TF_NEED_HDFS=0
    export TF_ENABLE_XLA=0
    export TF_NEED_OPENCL=0
    export TF_NEED_CUDA=1
    export TF_CUDA_CLANG=0
    export GCC_HOST_COMPILER_PATH=`which gcc`
    export TF_CUDA_VERSION="7.5"
    export CUDA_TOOLKIT_PATH="/usr/local/cuda"
    export TF_CUDNN_VERSION="5"
    export CUDNN_INSTALL_PATH=$CUDA_TOOLKIT_PATH
    export TF_CUDA_COMPUTE_CAPABILITIES="3.5"

    # Java certs...
    apt-get install ca-certificates-java
    update-ca-certificates -f

    cd $BOOTSTRAP_WORKDIR
    wget https://github.com/tensorflow/tensorflow/archive/v1.1.0-rc2.tar.gz -O tensorflow.tar.gz
    tar xf tensorflow.tar.gz
    mv tensorflow-1.1.0-rc2 tensorflow
    cd tensorflow
#    cp /configure_tensorflow_python2 .
    ./configure
#    ./configure_tensorflow_python2

    bazel build -c opt --copt=-mavx --copt=-msse4.1 --copt=-msse4.2 --config=cuda tensorflow/tools/pip_package:build_pip_package
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

    pip install /tmp/tensorflow_pkg/tensorflow-*.whl

    cd $BOOTSTRAP_WORKDIR
    rm -rf tensorflow
    rm -rf /tmp/tensorflow_pkg

    PYTHON_BIN_PATH=`which python3`

    wget https://github.com/tensorflow/tensorflow/archive/v1.1.0-rc2.tar.gz -O tensorflow.tar.gz
    tar xf tensorflow.tar.gz
    mv tensorflow-1.1.0-rc2 tensorflow
    cd tensorflow
#    cp /configure_tensorflow_python3 .
    ./configure
#    ./configure_tensorflow_python3

    bazel build -c opt --copt=-mavx --copt=-msse4.1 --copt=-msse4.2 --config=cuda tensorflow/tools/pip_package:build_pip_package
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

    pip3 install /tmp/tensorflow_pkg/tensorflow-*.whl

    cd $BOOTSTRAP_WORKDIR
    rm -rf tensorflow
    rm -rf /tmp/tensorflow_pkg

    # Change compilers back
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 51
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 50
    update-alternatives --auto gcc
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 51
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 50
    update-alternatives --auto g++

    pip install keras
    pip3 install keras

    pip install scikit-learn
    pip3 install scikit-learn

    apt-get install -y python-theano
    apt-get install -y python3-theano

    # Install MPI4PY against mpich(python-mpi4py is built against OpenMPI)
    pip install mpi4py
    pip3 install mpi4py

    # Make sure bazel is shutdown so it doesn't stop singularity from cleanly exiting
    bazel shutdown
    sleep 10
    pkill -f bazel*
    ps aux | grep bazel

    # Remove tmp files used during bootstrap
    rm -rf .bootstrap.post
