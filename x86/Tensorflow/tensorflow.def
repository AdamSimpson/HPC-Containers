# Defines a Singularity container with TensorFlow pre-installed
#
BootStrap: docker
From: ubuntu:xenial

%pre
  mkdir -p ${SINGULARITY_ROOTFS}/opt/cray

  # Mount point for Cray files needed for ALSP runtime
  mkdir -p ${SINGULARITY_ROOTFS}/var/spool/alps
  mkdir -p ${SINGULARITY_ROOTFS}/var/opt/cray

  # Mount lustre
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas1
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas2

%setup
  cp configure_tensorflow_python2 ${SINGULARITY_ROOTFS}
  cp configure_tensorflow_python3 ${SINGULARITY_ROOTFS}

  cp tensorflow.post ${SINGULARITY_ROOTFS}

  # Copy over driver specific files, these are NOT portable
  cp -r /opt/cray/nvidia/default/lib64/* ${SINGULARITY_ROOTFS}/usr/lib
  cp -r /opt/cray/nvidia/default/bin/* ${SINGULARITY_ROOTFS}/usr/bin

  # Setup the environment to be sued in the container
  echo "" >> ${SINGULARITY_ROOTFS}/environment
  echo "export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/cuda/bin:/usr/lib/jvm/java-8-openjdk-amd64/bin" >> ${SINGULARITY_ROOTFS}/environment
  echo "export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/lib/nvidia" >> ${SINGULARITY_ROOTFS}/environment
  echo "export CUDA_HOME=/usr/local/cuda" >> ${SINGULARITY_ROOTFS}/environment
  echo "export GRADLE_USER_HOME=${HOME}" >> ${SINGULARITY_ROOTFS}/environment
  echo "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> ${SINGULARITY_ROOTFS}/environment
  echo "export PROTOC=/usr/local/bin/protoc" >> ${SINGULARITY_ROOTFS}/environment
  echo "export GRPC_JAVA_PLUGIN=/usr/local/bin/protoc-gen-grpc-java" >> ${SINGULARITY_ROOTFS}/environment

  # Hack because bazel spins up daemons that confuse singularity during shutdown resulting is leftover files
  rm -rf /root/.cache/bazel

%post
  . /environment
  . ./tensorflow.post

%runscript
    exec /usr/bin/python "$@"
