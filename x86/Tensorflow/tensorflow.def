# Defines a Singularity container with TensorFlow pre-installed
#
BootStrap: docker
From: ubuntu:zesty

%setup
  # Mount point for Cray files needed for MPI
  mkdir -p ${SINGULARITY_ROOTFS}/opt/cray

  # Mount point for Cray files needed for ALSP runtime
  mkdir -p ${SINGULARITY_ROOTFS}/var/spool/alps
  mkdir -p ${SINGULARITY_ROOTFS}/var/opt/cray

  # Mount lustre
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas1
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas2

  # Manually mount lustre as its used as scratch on Titan
  if [ -d /lustre/atlas ]
    mount --no-mtab --bind "/lustre/atlas" "$SINGULARITY_ROOTFS/lustre/atlas"
    mount --no-mtab --bind "/lustre/atlas1" "$SINGULARITY_ROOTFS/lustre/atlas1"
    mount --no-mtab --bind "/lustre/atlas2" "$SINGULARITY_ROOTFS/lustre/atlas2"
  fi

  # Create a directory in the mounted lustre directory to keep bootstrap files
  BOOTSTRAP_WORKDIR=`pwd`/.bootstrap.post
  mkdir -p ${SINGULARITY_ROOTFS}/${BOOTSTRAP_WORKDIR}
  cp tensorflow.post ${SINGULARITY_ROOTFS}/${BOOTSTRAP_WORKDIR}
  if [ -e cuda_7.5.18_linux.run ]; then
    cp cuda_7.5.18_linux.run ${SINGULARITY_ROOTFS}/${BOOTSTRAP_WORKDIR}
  fi

  # Setup the environment to be sued in the container
  echo "" >> ${SINGULARITY_ROOTFS}/environment
  echo "export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/cuda/bin:/usr/lib/jvm/java-8-openjdk-amd64/bin" >> ${SINGULARITY_ROOTFS}/environment
  echo "export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/lib/nvidia" >> ${SINGULARITY_ROOTFS}/environment
  echo "export CUDA_HOME=/usr/local/cuda" >> ${SINGULARITY_ROOTFS}/environment
  echo "export GRADLE_USER_HOME=${HOME}" >> ${SINGULARITY_ROOTFS}/environment
  echo "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> ${SINGULARITY_ROOTFS}/environment
  echo "export PROTOC=/usr/local/bin/protoc" >> ${SINGULARITY_ROOTFS}/environment
  echo "export GRPC_JAVA_PLUGIN=/usr/local/bin/protoc-gen-grpc-java" >> ${SINGULARITY_ROOTFS}/environment
  echo "unset PYTHONSTARTUP" >> ${SINGULARITY_ROOTFS}/environment
  echo "BOOTSTRAP_WORKDIR=${BOOTSTRAP_WORKDIR}" >> ${SINGULARITY_ROOTFS}/environment

  ####
  # Setup Cray MPI
  ####
  SYSUTILS_DEFAULT_DIR=`readlink -f /opt/cray/sysutils/default`
  WLM_DEFAULT_DIR=`readlink -f /opt/cray/wlm_detect/default`
  GNU_MPICH_LIB_DIR=`readlink -f /opt/cray/mpt/default/gni/mpich-GNU/5.1/lib`

  # Make sure Cray MPICH libraries are in container LD_LIBRARY_PATH
  echo "export LD_LIBRARY_PATH=${GNU_MPICH_LIB_DIR}:"'${LD_LIBRARY_PATH}'":${CRAY_LD_LIBRARY_PATH}:${SYSUTILS_DEFAULT_DIR}/lib64:${WLM_DEFAULT_DIR}/lib64:/lib64:/usr/lib/x86_64-linux-gnu" >> ${SINGULARITY_ROOTFS}/environment

  # Hack because bazel spins up daemons that confuse singularity during shutdown resulting is leftover files
  rm -rf /root/.cache/bazel

%post
  . /environment
  cd $BOOTSTRAP_WORKDIR
  . ./tensorflow.post

%runscript
    exec /usr/bin/python "$@"
