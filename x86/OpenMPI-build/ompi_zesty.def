BootStrap: docker
From: ubuntu:zesty
IncludeCmd: yes

%pre
  # Mount point for Cray files needed for MPI
  mkdir -p ${SINGULARITY_ROOTFS}/opt/cray

  # Mount point for Cray files needed for ALSP runtime
  mkdir -p ${SINGULARITY_ROOTFS}/var/spool/alps
  mkdir -p ${SINGULARITY_ROOTFS}/var/opt/cray

  # Mount lustre
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas1
  mkdir -p ${SINGULARITY_ROOTFS}/lustre/atlas2

%setup
  # OpenMPI quiries the CLE release file
  cp /etc/opt/cray/release/clerelease ${SINGULARITY_ROOTFS}

  # wlm_detect is in /usr/lib64/pkgconfig which isnt exposed to the container
  SYSUTILS_DEFAULT_DIR=`readlink -f /opt/cray/sysutils/default`
  WLM_DEFAULT_DIR=`readlink -f /opt/cray/wlm_detect/default`
  PMI_DEFAULT_DIR=`readlink -f /opt/cray/pmi/default`
  UGNI_DEFAULT_DIR=`readlink -f /opt/cray/ugni/default`
  UDREG_DEFAULT_DIR=`readlink -f /opt/cray/udreg/default`

  # Symlinks cant always be followed in the container as the links arent mounted so we place them in /environment
  # which singularity currently sources
  echo "" >> ${SINGULARITY_ROOTFS}/environment
  echo "export PMI_DEFAULT_DIR=${PMI_DEFAULT_DIR}" >> ${SINGULARITY_ROOTFS}/environment
  echo "export UGNI_DEFAULT_DIR=${UGNI_DEFAULT_DIR}" >> ${SINGULARITY_ROOTFS}/environment
  echo "export UDREG_DEFAULT_DIR=${UDREG_DEFAULT_DIR}" >> ${SINGULARITY_ROOTFS}/environment
  echo "export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin" >> ${SINGULARITY_ROOTFS}/environment
  echo "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CRAY_LD_LIBRARY_PATH}:${WLM_DEFAULT_DIR}/lib64:${SYSUTILS_DEFAULT_DIR}/lib64:/usr/lib/x86_64-linux-gnu" >> ${SINGULARITY_ROOTFS}/environment
  echo "export PKG_CONFIG_PATH=${WLM_DEFAULT_DIR}/lib64/pkgconfig/:${SYSUTILS_DEFAULT_DIR}/lib64/pkgconfig/:${PKG_CONFIG_PATH}" >> ${SINGULARITY_ROOTFS}/environment

%post
  # Environment isnt sourced in post but contains variables we need set
  . /environment

  # Supress some messages from apt related to being in a minimal install
  export DEBIAN_FRONTEND=noninteractive

  # Enable grabbing source
  sed -i '/deb-src/s/#//g' /etc/apt/sources.list

  apt-get update
  apt-get install -y dh-make devscripts build-essential lintian apt-utils pax-utils strace gfortran ltrace libssl-dev zlib1g zlib1g-dev pkg-config wget git vim binutils dpkg-dev libtool automake autoconf flex ssh expat libxmlrpc-epi-dev libexpat1-dev libxml2 libxml2-dev libhwloc-dev libmunge-dev

  mkdir -p /etc/opt/cray/release/
  cp /clerelease /etc/opt/cray/release

  mkdir OMPI_BUILD && cd OMPI_BUILD
  apt-get source openmpi
  cd openmpi-2.0.2
  dpkg-source --commit

  # Remove me after modifying for Cray:
  apt-get install -y chrpath libibverbs-dev libfabric-dev libpsm-infinipath1-dev libcr-dev default-jdk

  # This should probably be signed: https://help.ubuntu.com/community/GnuPrivacyGuardHowto
  debuild -uc -us --lintian-opts --profile debian

  cd /

#  I dont know why but using tags instead of releases causes issues when running osu bandwidth benchmarks
#  git clone https://github.com/open-mpi/ompi.git
#  cd ompi
#  git checkout tags/v2.0.2
#  wget https://github.com/open-mpi/ompi/archive/v2.0.2.tar.gz -O v2.0.2.tar.gz
#  tar xf v2.0.2.tar.gz
#  cd ompi-2.0.2
#  ./autogen.pl
#  ./configure --with-hwloc=/usr --enable-shared --enable-mpi-cxx --without-tm --without-slurm --with-alps --without-verbs-sshmem --with-ugni=${UGNI_DEFAULT_DIR} --disable-getpwuid --with-udreg=${UDREG_DEFAULT_DIR} --disable-dlopen --without-psm --without-psm2 --without-mxm --disable-mpi-thread-multiple --without-sqlite3 --enable-vt --with-cray_pmi=${PMI_DEFAULT_DIR} --without-verbs

#  make -j 16
#  make install

  # Not sure why this is needed
#  chmod -R 755 /usr/local/share
#  chmod -R 755 /usr/local/lib

  # Create dummy package entry
#  cd /
#  apt-get -y install equivs
#  equivs-build /equivs-cray-openmpi
#  dpkg -i cray-openmpi_1.0_all.deb

  # Create symlinks to versioned libraries applicable to Ubuntu Zesty
  # These are needed for ubuntu provided packages built against openmpi
#  ln -s /usr/local/lib/libmpi.so /usr/lib/libmpi.so.20
#  ln -s /usr/local/lib/libmpi.so /usr/lib/libmpi.so.20.0.2

  # Install MPI4PY
#  apt-get -y install python-mpi4py

  # Runtime OMPI flags needed on Cray
  echo "export OMPI_MCA_mpi_leave_pinned=0" >> /environment
  echo "export OMPI_MCA_mpi_leave_pinned_pipeline=0" >> /environment
